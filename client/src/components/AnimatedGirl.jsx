/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 public/models/girl-animation.glb -o src/components/AnimatedGirl.jsx -r public 
*/
import React, { useEffect, useMemo, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useFrame, useGraph } from "@react-three/fiber";

const MOVEMENT_SPEED = 0.05;

export function AnimatedGirl(props) {

  const position = useMemo(() => props.position, []);

  const group = useRef()
  const { scene, materials, animations } = useGLTF('/models/girl-animation.glb')

    //clone mesh
    const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
    const { nodes } = useGraph(clone);
  
    const { actions } = useAnimations(animations, group);
    const [animation, setAnimation] = useState("idle");

    useEffect(() => {
      actions[animation].reset().fadeIn(0.32).play();
      return () => actions[animation]?.fadeOut(0.32);
    }, [animation]);

    useFrame(() => {
      if (group.current.position.distanceTo(props.position) > 0.1) {
        const direction = group.current.position
          .clone()
          .sub(props.position)
          .normalize()
          .multiplyScalar(MOVEMENT_SPEED);
        group.current.position.sub(direction);
        group.current.lookAt(props.position);
        setAnimation("walk");
      } else {
        setAnimation("idle");
      }
    });
  
    console.log(actions);

  
  return (
    <group ref={group} {...props} position={position} dispose={null}>
      <group name="Scene">
        <group name="idle" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="Ch03" geometry={nodes.Ch03.geometry} material={materials.Ch03_Body} skeleton={nodes.Ch03.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/girl-animation.glb')
